"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[4900],{91971:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(76687);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(n),g=a,m=c["".concat(l,".").concat(g)]||c[g]||p[g]||s;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<s;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},82655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var r=n(855),a=(n(76687),n(91971));const s={},i="Delegates and lambdas",o={unversionedId:"documentation/Guides/xtd.core/delegates_and_lambdas",id:"documentation/Guides/xtd.core/delegates_and_lambdas",title:"Delegates and lambdas",description:"Delegates define a type that specifies a particular method signature.",source:"@site/docs/documentation/Guides/xtd.core/delegates_and_lambdas.md",sourceDirName:"documentation/Guides/xtd.core",slug:"/documentation/Guides/xtd.core/delegates_and_lambdas",permalink:"/xtd/docs/documentation/Guides/xtd.core/delegates_and_lambdas",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Console applications (xtd.core)",permalink:"/xtd/docs/documentation/Guides/xtd.core/console_class"},next:{title:"Interfaces",permalink:"/xtd/docs/documentation/Guides/xtd.core/interfaces"}},l={},u=[],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"delegates-and-lambdas"},"Delegates and lambdas"),(0,a.kt)("p",null,"Delegates define a type that specifies a particular method signature.\nA method (instance, functor, static) that satisfies this signature can be assigned to a variable of this type and then called directly (with the appropriate arguments) or passed as an argument to another method and then called."),(0,a.kt)("p",null,"The following example demonstrates the use of delegates with instance method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nclass stringer {\npublic:\n  ustring reverse_string(const ustring& s) {\n    ustring result = s;\n    std::reverse(result.begin(), result.end());\n    return result;\n  }\n};\n\nclass program {\npublic:\n  using reverse = delegate<ustring(const ustring& s)>;\n  \n  static auto main(const std::vector<ustring>& args) {\n    stringer s;\n    reverse rev(s, &stringer::reverse_string);\n    \n    console::write_line(rev("a string"));\n  }\n};\n\nstartup_(program);\n')),(0,a.kt)("p",null,"The following example demonstrates the use of delegates with functor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nstruct string_reverser {\n  ustring operator ()(const ustring& s) {\n    ustring result = s;\n    std::reverse(result.begin(), result.end());\n    return result;\n  }\n};\n\nclass program {\npublic:\n  using reverse = delegate<ustring(const ustring& s)>;\n  \n  static auto main(const std::vector<ustring>& args) {\n    string_reverser sr;\n    reverse rev(sr);\n    \n    console::write_line(rev("a string"));\n  }\n};\n\nstartup_(program);\n')),(0,a.kt)("p",null,"The following example demonstrates the use of delegates with static method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nclass program {\npublic:\n  using reverse = delegate<ustring(const ustring& s)>;\n  \n  static ustring reverse_string(const ustring& s) {\n    ustring result = s;\n    std::reverse(result.begin(), result.end());\n    return result;\n  }\n  \n  static auto main(const std::vector<ustring>& args) {\n    reverse rev(reverse_string);\n    \n    console::write_line(rev("a string"));\n  }\n};\n\nstartup_(program);\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"using reverse = delegate<ustring(const ustring& s)>;")," line creates a delegate type of a certain signature, in this case a method that takes a string parameter and then returns a string parameter."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"static ustring reverse_string(const ustring& s)")," method, which has the exact same signature as the defined delegate type, implements the delegate."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"reverse rev(reverse_string);")," line shows that you can assign a method to a variable of the corresponding delegate type."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},'console::write_line(rev("a string"));')," line demonstrates how to use a variable of a delegate type to invoke the delegate.")),(0,a.kt)("p",null,"In order to streamline the development process, xtd includes a set of delegate types that programmers can reuse and not have to create new types.\nThese types are ",(0,a.kt)("inlineCode",{parentName:"p"},"xtd::func<>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"xtd::action<>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"xtd::predicate<>"),", and they can be used without having to define new delegate types.\nThere are some differences between the three types that have to do with the way they were intended to be used:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"xtd::action<>")," is used when there is a need to perform an action using the arguments of the delegate. The method it encapsulates does not return a value."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"xtd::func<>")," is used usually when you have a transformation on hand, that is, you need to transform the arguments of the delegate into a different result. Projections are a good example. The method it encapsulates returns a specified value."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"xtd::predicate<>")," is used when you need to determine if the argument satisfies the condition of the delegate. It can also be written as a ",(0,a.kt)("inlineCode",{parentName:"li"},"xtd::func<bool, type_t>"),", which means the method returns a boolean value.")),(0,a.kt)("p",null,"We can now take our example above and rewrite it using the ",(0,a.kt)("inlineCode",{parentName:"p"},"xtd::func<>")," delegate instead of a custom type.\nThe program will continue running exactly the same."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nclass program {\npublic:\n  static ustring reverse_string(const ustring& s) {\n    ustring result = s;\n    std::reverse(result.begin(), result.end());\n    return result;\n  }\n  \n  static auto main(const std::vector<ustring>& args) {\n    func<ustring, const ustring&> rev(reverse_string);\n    \n    console::write_line(rev("a string"));\n  }\n};\n\nstartup_(program);\n')),(0,a.kt)("p",null,"For this simple example, having a method defined outside of the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," method seems a bit superfluous. c++11 introduced the concept of ",(0,a.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/lambda"},"lambda expressions"),', which let you create "inline" methods without having to specify any additional type or method.'),(0,a.kt)("p",null,"We can now take our example above and rewrite it using a lambda expression.\nThe program will continue running exactly the same."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nclass program {\npublic:\n  static auto main(const std::vector<ustring>& args) {\n    func<ustring, const ustring&> rev([](auto s) {\n      ustring result = s;\n      std::reverse(result.begin(), result.end());\n      return result;\n    });\n    \n    console::write_line(rev("a string"));\n  }\n};\n\nstartup_(program);\n')),(0,a.kt)("p",null,"As you can see, the delegate body is just a set of expressions, like any other delegate.\nBut instead of making it a separate definition, we introduced it ad hoc in the creation of ",(0,a.kt)("inlineCode",{parentName:"p"},"func<ustring, const ustring&> rev"),"."),(0,a.kt)("h1",{id:"see-also"},"See also"),(0,a.kt)("p",null,"\u200b"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation/Guides"},"Guides")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}p.isMDXComponent=!0}}]);