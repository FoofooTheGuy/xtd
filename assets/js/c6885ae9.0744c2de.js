"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[4451],{91971:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>g});var a=t(76687);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,i=function(n,e){if(null==n)return{};var t,a,i={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var s=a.createContext({}),c=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(s.Provider,{value:e},n.children)},m="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,i=n.mdxType,r=n.originalType,s=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),m=c(t),d=i,g=m["".concat(s,".").concat(d)]||m[d]||p[d]||r;return t?a.createElement(g,o(o({ref:e},u),{},{components:t})):a.createElement(g,o({ref:e},u))}));function g(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[m]="string"==typeof n?n:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},52294:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(855),i=(t(76687),t(91971));const r={sidebar_position:16},o="main function and startup_ keyword",l={unversionedId:"documentation/Guides/xtd.core/Entry point/main_and_startup",id:"documentation/Guides/xtd.core/Entry point/main_and_startup",title:"main function and startup_ keyword",description:"main function",source:"@site/docs/documentation/Guides/xtd.core/Entry point/main_and_startup.md",sourceDirName:"documentation/Guides/xtd.core/Entry point",slug:"/documentation/Guides/xtd.core/Entry point/main_and_startup",permalink:"/xtd/docs/documentation/Guides/xtd.core/Entry point/main_and_startup",draft:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"How to: Write a Text File",permalink:"/xtd/docs/documentation/Guides/xtd.core/Common I:O tasks/write_a_text_file"},next:{title:"Observer Design Pattern",permalink:"/xtd/docs/documentation/Guides/xtd.core/Events/observer_design_pattern"}},s={},c=[{value:"main function",id:"main-function",level:2},{value:"main function arguments",id:"main-function-arguments",level:2},{value:"xtd::environment::command_line and xtd::environment::get_command_line_args usage",id:"xtdenvironmentcommand_line-and-xtdenvironmentget_command_line_args-usage",level:3},{value:"startup_ keyword",id:"startup_-keyword",level:2},{value:"startup_ definition",id:"startup_-definition",level:2},{value:"startup_ and exceptions",id:"startup_-and-exceptions",level:3},{value:"statup_ keyword usage",id:"statup_-keyword-usage",level:3},{value:"Windows main definitions",id:"windows-main-definitions",level:2}],u={toc:c},m="wrapper";function p(n){let{components:e,...t}=n;return(0,i.kt)(m,(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"main-function-and-startup_-keyword"},"main function and startup_ keyword"),(0,i.kt)("h2",{id:"main-function"},"main function"),(0,i.kt)("p",null,"A program shall contain a global function named ",(0,i.kt)("inlineCode",{parentName:"p"},"main"),", which is the designated start of the program in hosted environment. "),(0,i.kt)("p",null,"It shall have one of the following forms:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int main () { /*body*/ }")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int main (int argc, char* argv[]) { /*body*/ }"))),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/main_function"},"Main function")," for more information."),(0,i.kt)("h2",{id:"main-function-arguments"},"main function arguments"),(0,i.kt)("p",null,"You can get command line arguments event if you use ",(0,i.kt)("inlineCode",{parentName:"p"},"main"),"function without argument. "),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1environment.html"},"xtd::environment")," class grabs and keeps for you the command line arguments :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1environment.html#ad79abc5dbbaf65805f8a84c33a622fbd"},"xtd::environment::command_line")," property gets the command line for this process."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1environment.html#a67b0e929793847d994dce7b741dc2ad3"},"xtd::environment::get_command_line_args")," method returns a string array containing the command-line arguments for the current process.")),(0,i.kt)("h3",{id:"xtdenvironmentcommand_line-and-xtdenvironmentget_command_line_args-usage"},"xtd::environment::command_line and xtd::environment::get_command_line_args usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace xtd;\n\nint main() {\n  // Write the command line to the console output\n  console::write_line(environment::command_line());\n\n  console::write_line();\n\n  // Write command line arguments to the console output\n  for (auto arg : environment::get_command_line_args())\n    console::write_line(arg);\n}\n")),(0,i.kt)("p",null,"As you can see, even if the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function is called without arguments and if ",(0,i.kt)("inlineCode",{parentName:"p"},'one two "three four" five')," are entered on the command line, you can still retrieve them."),(0,i.kt)("h2",{id:"startup_-keyword"},"startup_ keyword"),(0,i.kt)("p",null,"xtd introduces the keyword ",(0,i.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gac9b8e6f22fb2fdc1bb915ee01aef848c"},"startup_")," which allows to have a main static method in any class with different parameters with or without return value."),(0,i.kt)("p",null,"Behind this keyword there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," global function that call ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," static method in the specified class parameter with ",(0,i.kt)("inlineCode",{parentName:"p"},"try")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"catch"),"."),(0,i.kt)("h2",{id:"startup_-definition"},"startup_ definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#define startup_(main_class) \\\n  auto main(int argc, char* argv[])->int {\\\n    try {\\\n      return __startup__::run(main_class::main, argc, argv);\\\n    } catch(const std::exception& e) {\\\n      __startup_catch_exception__(e);\\\n    } catch(...) {\\\n      __startup_catch_exception__();\\\n    }\\\n  }\\\n  auto __startup_force_to_end_with_semicolon__ = 0\n")),(0,i.kt)("h3",{id:"startup_-and-exceptions"},"startup_ and exceptions"),(0,i.kt)("p",null,"Even if ",(0,i.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gac9b8e6f22fb2fdc1bb915ee01aef848c"},"startup_")," keyword catch exceptions, it's preferable that you catch yourself exception. Indeed ",(0,i.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gac9b8e6f22fb2fdc1bb915ee01aef848c"},"startup_")," generate a generic fallback message to the output console for a console application and a generic falbback ",(0,i.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1exception__dialog.html"},"xtd::forms::dialog_exception")," for a GUI application."),(0,i.kt)("p",null,"Your code should look like this :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace xtd;\n\nnamespace examples {\n  class program {\n  public:\n    static void main() {\n      try {\n        // your code\n      } catch(const std::exception& e) {\n        // Your catch handler\n      }\n    }\n  };\n}\n\nstartup_(examples::program);\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/try_catch"},"try-block")," for more information."),(0,i.kt)("h3",{id:"statup_-keyword-usage"},"statup_ keyword usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Static ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," member function without argument and without return value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace xtd;\n\nnamespace examples {\n  class program {\n  public:\n    static void main() {\n      // Write arguments to the console output\n      for (auto arg : environment::get_command_line_args())\n        console::write_line(arg);\n        \n      // return 42\n      environment::exit_code(42);\n    }\n  };\n}\n\nstartup_(examples::program);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Static ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," member function without argument and with int return value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace xtd;\n\nnamespace examples {\n  class program {\n  public:\n    static int main() {\n      // Write arguments to the console output\n      for (auto arg : environment::get_command_line_args())\n        console::write_line(arg);\n        \n      return 42;\n    }\n  };\n}\n\nstartup_(examples::program);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Static ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," member function with string array argument and without return value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace std;\nusing namespace xtd;\n\nnamespace examples {\n  class program {\n  public:\n    static void main(const vector<ustring>& args) {\n      // Write arguments to the console output\n      for (auto arg : args)\n        console::write_line(arg);\n        \n      // return 42\n      environment::exit_code(42);\n    }\n  };\n}\n\nstartup_(examples::program);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Static ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," member function with string array argument and with int return value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace std;\nusing namespace xtd;\n\nnamespace examples {\n  class program {\n  public:\n    static int main(const vector<ustring>& args) {\n      // Write arguments to the console output\n      for (auto arg : args)\n        console::write_line(arg);\n        \n      return 42;\n    }\n  };\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Static ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," member function with int and char*[] arguments and without return value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace std;\nusing namespace xtd;\n\nnamespace examples {\n  class program {\n  public:\n    static void main(int argc, char* argv[]) {\n      // Write arguments to the console output\n      for (auto arg : {argv, argv + argc})\n        console::write_line(arg);\n        \n      // return 42\n      environment::exit_code(42);\n    }\n  };\n}\n\nstartup_(examples::program);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Static ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," member function with int and char*[] arguments and with int return value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace std;\nusing namespace xtd;\n\nnamespace examples {\n  class program {\n  public:\n    static int main(int argc, char* argv[]) {\n      // Write arguments to the console output\n      for (auto arg : {argv, argv + argc})\n        console::write_line(arg);\n        \n      return 42;\n    }\n  };\n}\n\nstartup_(examples::program);\n")),(0,i.kt)("h2",{id:"windows-main-definitions"},"Windows main definitions"),(0,i.kt)("p",null,"In Windows, there are different definitions for main in addition to the c++ standard :"),(0,i.kt)("p",null,"main definitions in the standard c++ :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int main () { /*body*/ }")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int main (int argc, char* argv[]) { /*body*/ }")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int main (int argc, wchar_t* argv[], char* envp[ ]) { /*body*/ }"))),(0,i.kt)("p",null,"main definitions specific Windows :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int wmain () { /*body*/ }")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int wmain (int argc, wchar_t* argv[]) { /*body*/ }")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int wmain (int argc, wchar_t* argv[], wchar_t* envp[ ]) { /*body*/ }")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR pCmdLine, int nCmdShow);")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow);"))),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/cpp/c-language/using-wmain?view=msvc-170"},"Using wmain")," and ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/learnwin32/winmain--the-application-entry-point"},"WinMain: The Application Entry Point")," for more information"),(0,i.kt)("p",null,"For xtd portability, the ",(0,i.kt)("inlineCode",{parentName:"p"},"/ENTRY:mainCRTStartup")," flag is added automatically when you add the xtd library in your CMakeLists.txt to the linker flags. So even for a GUI application you can call the main functions of the c++ standard in the Windows development environment."),(0,i.kt)("p",null,"If you are not using CMake for your project creation, it is advisable to add this flag manually."),(0,i.kt)("h1",{id:"see-also"},"See also"),(0,i.kt)("p",null,"\u200b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/documentation/Guides"},"Guides")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}p.isMDXComponent=!0}}]);