"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[2090],{91971:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var r=a(76687);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),m=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=m(a),u=n,h=d["".concat(l,".").concat(u)]||d[u]||c[u]||i;return a?r.createElement(h,s(s({ref:t},p),{},{components:a})):r.createElement(h,s({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:n,s[1]=o;for(var m=2;m<i;m++)s[m]=a[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},43600:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=a(855),n=(a(76687),a(91971));const i={},s="Date and time",o={unversionedId:"documentation/Guides/xtd.core/Types overview/date_time",id:"documentation/Guides/xtd.core/Types overview/date_time",title:"Date and time",description:"In This Section",source:"@site/docs/documentation/Guides/xtd.core/Types overview/date_time.md",sourceDirName:"documentation/Guides/xtd.core/Types overview",slug:"/documentation/Guides/xtd.core/Types overview/date_time",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/date_time",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Type Conversion Tables in xtd",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/Type conversion/type_conversion_tables"},next:{title:"Delegates",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/delegates"}},l={},m=[{value:"In This Section",id:"in-this-section",level:2},{value:"Quick links to Remarks topics.",id:"quick-links-to-remarks-topics",level:2},{value:"Note",id:"note",level:2},{value:"Initializing a date_time object",id:"initializing-a-date_time-object",level:2},{value:"Invoke Constructors",id:"invoke-constructors",level:3},{value:"Assigning a computed value",id:"assigning-a-computed-value",level:3},{value:"Parsing a string that represents a DateTime",id:"parsing-a-string-that-represents-a-datetime",level:3},{value:"See also",id:"see-also",level:2}],p={toc:m},d="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"date-and-time"},"Date and time"),(0,n.kt)("h2",{id:"in-this-section"},"In This Section"),(0,n.kt)("p",null,"This article includes several examples that use the DateTime type:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Initialization Examples",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#invoke-a-constructor"},"Invoke a constructor")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Invoke the implicit parameterless constructor")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Assignment from return value")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Parsing a string that represents a date and time")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Visual Basic syntax to initialize a date and time")))),(0,n.kt)("li",{parentName:"ul"},"Formatting DateTime objects as strings",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Use the default date time format")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Format a date and time using a specific culture")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Format a date time using a standard or custom format string")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Specify both a format string and a specific culture")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Format a date time using the ISO 8601 standard for web services")))),(0,n.kt)("li",{parentName:"ul"},"Parsing strings as DateTime objects",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Use Parse or TryParse to convert a string to a date and time")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Use ParseExact or TryParseExact to convert a string in a known format")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Convert from the ISO 8601 string representation to a date and time")))),(0,n.kt)("li",{parentName:"ul"},"DateTime resolution",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Explore the resolution of date and time values")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Comparing for equality within a tolerance")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Culture and calendars")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Display date and time values using culture specific calendars")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Parse strings according to a culture specific calendar")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Initialize a date and time from a specific culture's calendar")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Accessing date and time properties using a specific culture's calendar")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Retrieving the week of the year using culture specific calendars")))),(0,n.kt)("li",{parentName:"ul"},"Persistence",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Persisting date and time values as strings in the local time zone")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Persisting date and time values as strings in a culture and time invariant format")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Persisting date and time values as integers")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Persisting date and time values using the XmlSerializer")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Persisting date and time values using the BinaryFormatter")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Persisting date and time values with time zone data"))))),(0,n.kt)("h2",{id:"quick-links-to-remarks-topics"},"Quick links to Remarks topics."),(0,n.kt)("p",null,"This section contains topics for many common uses of the DateTime struct:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#initializing-a-date-time-object"},"Initializing a date_time object")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"DateTime values and their string representations")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Parsing DateTime values from strings")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"DateTime values")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"DateTime operations")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"DateTime resolution")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"DateTime values and calendars")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Persisting DateTime values")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"DateTime vs. TimeSpan")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"Comparing for equality within tolerance")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#"},"COM interop considerations"))),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html"},"xtd::date_time")," value type represents dates and times with values ranging from 00:00:00 (midnight), January 1, 0001 Anno Domini (Common Era) through 11:59:59 P.M., December 31, 9999 A.D. (C.E.) in the Gregorian calendar."),(0,n.kt)("p",null,"Time values are measured in 100-nanosecond units called ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__types.html#ga8fd3ccd5f25e401dc28a28ba352aa966"},"ticks"),". A particular date is the number of ticks since 12:00 midnight, January 1, 0001 A.D. (C.E.) in the GregorianCalendar calendar.\nThe number excludes ticks that would be added by leap seconds. For example, a ticks value of 31241376000000000L represents the date Friday, January 01, 0100 12:00:00 midnight. A ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html"},"xtd::date_time")," value is always expressed in the context of an explicit or default calendar."),(0,n.kt)("h2",{id:"note"},"Note"),(0,n.kt)("p",null,"  If you are working with a ticks value that you want to convert to some other time interval, such as minutes or seconds, you should use the ",(0,n.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/chrono/duration/duration_cast"},"std::chono::duretion_cast\\<",">")," converter to perform the conversion or use ",(0,n.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/chrono/duration"},"std::chrono::nanoseconds"),", ",(0,n.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/chrono/duration"},"std::chrono::microseconds"),", ",(0,n.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/chrono/duration"},"std::chrono::milliseonds"),", ",(0,n.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/chrono/duration"},"std::chrono::seconds"),", ",(0,n.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/chrono/duration"},"std::chrono::minutes")," and ",(0,n.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/chrono/duration"},"std::chrono::hours")," durations.\nFor example, to add the number of seconds represented by a specified number of ticks to the ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html#ae084c4d68a46500b8e64f4aec4869a15"},"second")," component of a ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html"},"xtd::date_time")," value, you can use the expression 'dateValue.second() + std::duration_cast\\<std::chrono::second",">","(n_ticks).count()'."),(0,n.kt)("p",null,"You can view the source for the entire set of examples from this article from the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/gammasoft71/xtd/blob/master/examples/xtd.core.examples/date_time/README.md"},"examples")," repository on GitHub."),(0,n.kt)("h2",{id:"initializing-a-date_time-object"},"Initializing a date_time object"),(0,n.kt)("p",null,"You can assign an initial value to a new ",(0,n.kt)("inlineCode",{parentName:"p"},"date_time")," value in many different ways:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Calling a constructor, either one where you specify arguments for values, or use the implicit parameterless constructor."),(0,n.kt)("li",{parentName:"ul"},"Assigning a ",(0,n.kt)("inlineCode",{parentName:"li"},"date_time")," to the return value of a property or method."),(0,n.kt)("li",{parentName:"ul"},"Parsing a ",(0,n.kt)("inlineCode",{parentName:"li"},"date_time")," value from its string representation.")),(0,n.kt)("p",null,"The following code snippets show examples of each:"),(0,n.kt)("h3",{id:"invoke-constructors"},"Invoke Constructors"),(0,n.kt)("p",null,"You call any of the overloads of the ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html"},"date_time")," constructor that specify elements of the date and time value (such as the year, month, and day, or the number of ticks).\nThe following code creates a specific date using the DateTime constructor specifying the year, month, day, hour, minute, and second."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"auto date1 = date_time(2008, 5, 1, 8, 30, 52);\nconsole::write_line(date1);\n")),(0,n.kt)("p",null,"You invoke the ",(0,n.kt)("inlineCode",{parentName:"p"},"date_time")," structure's implicit parameterless constructor when you want a ",(0,n.kt)("inlineCode",{parentName:"p"},"date_time")," initialized to its default value.\nThe following example illustrates the ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html"},"date_time")," implicit parameterless constructor."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"auto dat1 = date_time();\n// The following method call displays 1/1/0001 12:00:00 AM.\nconsole::write_line(dat1.to_string());\n// The following method call displays true.\nconsole::write_line(dat1 == date_time::min_value);\n")),(0,n.kt)("h3",{id:"assigning-a-computed-value"},"Assigning a computed value"),(0,n.kt)("p",null,"You can assign the ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html"},"date_time")," object a date and time value returned by a property or method.\nThe following example assigns the current date and time, the current Coordinated Universal Time (UTC) date and time, and the current date to three new ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html"},"date_time")," variables."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"date_time date1 = date_time::now();\ndate_time date2 = date_time::utc_now();\ndate_time date3 = date_time.today();\n")),(0,n.kt)("h3",{id:"parsing-a-string-that-represents-a-datetime"},"Parsing a string that represents a DateTime"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"#"},"xtd::parse\\<xtd::data_time",">"),", ",(0,n.kt)("a",{parentName:"p",href:"#"},"xtd::date_time::parse"),", ",(0,n.kt)("a",{parentName:"p",href:"#"},"xtd::date_time::parse_exact"),", ",(0,n.kt)("a",{parentName:"p",href:"#"},"xtd::try_parse\\<xtd::date_time",">"),", ",(0,n.kt)("a",{parentName:"p",href:"#"},"xtd::date_time::try_parse"),", and ",(0,n.kt)("a",{parentName:"p",href:"#"},"xtd::date_time::try_parse_exact")," methods all convert a string to its equivalent date and time value.\nThe following examples use the ",(0,n.kt)("a",{parentName:"p",href:"#"},"xtd::date_time::parse")," and ",(0,n.kt)("a",{parentName:"p",href:"#"},"xtd::date_time::parse_exact")," methods to parse a string and convert it to a ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1date__time.html"},"date_time")," value.\nThe second format uses a form supported by the ISO 8601 standard for a representing date and time in string format. This standard representation is often used to transfer date information in web services."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'auto date_string = "5/1/2008 8:30:52 AM";\ndate_time date1 = date_time::parse(date_string, std::locale());\nauto iso8601_string = "20080501T08:30:52Z";\ndate_time date_iso8602 = date_time::parse_exact(iso8601_string, "yyyyMMddTHH:mm:ssZ", std::locale());\n')),(0,n.kt)("h2",{id:"see-also"},"See also"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/documentation/Guides/Overview/Tutorials"},"Tutorials")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}c.isMDXComponent=!0}}]);